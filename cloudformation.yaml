AWSTemplateFormatVersion: "2010-09-09"
Description: S1

Parameters:
  GitHubOAuthToken:
    Type: String
    NoEcho: true
  GitHubOwner:
    Type: String
    Default: sheenagarg9
  GitHubRepo:
    Type: String
    Default: smart-photo-album
  GitHubBranch:
    Type: String
    Default: main
  ApplicationStackName:
    Type: String
    Default: P1-LF
  P1BucketName:
    Type: String
    Default: p1-codepipeline-ss
  KmsKeyForOpensearch:
    Type: String
    Default: ******************
  BucketName1:
    Type: String
    Default: NA
  BucketName2:
    Type: String
    Default: NA
  ObjectKey1:
    Type: String
    Default: NA
  ObjectKey2:
    Type: String
    Default: NA
  UploadBucket:
    Type: String
    Default: bucket-final
  OpensearchDomainEndpoint:
    Type: String
    Default: https://search-photos-ya6zmaniwieqwp7qykoeal6vpa.us-east-1.es.amazonaws.com
  SearchRoleArn:
    Type: String
    Default: arn:aws:iam::683207100841:role/service-role/search-photos-role-vhnjs76t
  IndexRoleArn:
    Type: String
    Default: arn:aws:iam::683207100841:role/service-role/index-role-5ep0uloy
  FrontendBucket:
    Type: String
    Default: smart-photo-ui

Resources:
  LF1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LF1
      Handler: "index.lambda_handler"
      Role: !Ref LFRoleArn
      Runtime: "python3.11"
      Timeout: 15
      MemorySize: 128
      Code:
        S3Bucket: !Ref BucketName1
        S3Key: !Ref ObjectKey1
      Environment:
        Variables:
          BUCKET_NAME: !Ref UploadBucket
          ES_ENDPOINT: !Ref OpensearchDomainEndpoint
  LF2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LF2
      Handler: "search-photos.lambda_handler"
      Role: !Ref SearchRoleArn
      Runtime: "python3.11"
      Timeout: 15
      MemorySize: 128
      Code:
        S3Bucket: !Ref BucketName2
        S3Key: !Ref ObjectKey2
      Environment:
        Variables:
          ES_ENDPOINT: !Ref OpensearchDomainEndpoint
  LFRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LFRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  Opensearch:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AdvancedSecurityOptions:
        Enabled: true
        MasterUserOptions:
          MasterUserARN: !GetAtt LFRole.Arn
      ClusterConfig:
        DedicatedMasterEnabled: true
        DedicatedMasterType: t3.small.search
        InstanceType: t3.small.search
      DomainEndpointOptions:
        EnforceHTTPS: true
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Sub "${KmsKeyForOpensearch}"
      DomainName: photos
      EBSOptions:
        EBSEnabled: true
        Iops: 3000
        VolumeSize: 10
        VolumeType: gp3
      NodeToNodeEncryptionOptions:
        Enabled: true
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: p2-codepipeline-ss
      VersioningConfiguration:
        Status: Suspended

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        Type: LINUX_CONTAINER
      Name: !Ref ApplicationStackName
      ServiceRole: !GetAtt CodeBuildRole.Arn

  P2:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodepipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: ExtractDir
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: SourceCode
              Configuration:
                ProjectName: !Ref CodeBuildProject
                PrimarySource: SourceCode
              OutputArtifacts:
                - Name: BuiltArtifact
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: S3Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              InputArtifacts:
                - Name: BuiltArtifact
              Configuration:
                BucketName: !Ref B1
                Extract: true
              RunOrder: 1
  B1:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref FrontendBucket
      WebsiteConfiguration:
        IndexDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  B1Policy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref B1
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref B1
                - /*

  GithubWebhook:
    Type: "AWS::CodePipeline::Webhook"
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: "true"
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref P2
      TargetAction: Source
      TargetPipelineVersion: !GetAtt P2.Version

  CodepipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: P2ServiceRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - cloudformation.amazonaws.com
                      - elasticbeanstalk.amazonaws.com
                      - ec2.amazonaws.com
                      - ecs-tasks.amazonaws.com
              - Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: "*"
                Effect: Allow
              - Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"
                Effect: Allow
              - Action:
                  - codestar-connections:UseConnection
                Resource: "*"
                Effect: Allow
              - Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: "*"
                Effect: Allow
              - Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: "*"
                Effect: Allow
              - Action:
                  - opsworks:CreateDeployment
                  - opsworks:DescribeApps
                  - opsworks:DescribeCommands
                  - opsworks:DescribeDeployments
                  - opsworks:DescribeInstances
                  - opsworks:DescribeStacks
                  - opsworks:UpdateApp
                  - opsworks:UpdateStack
                Resource: "*"
                Effect: Allow
              - Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                Resource: "*"
                Effect: Allow
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: "*"
                Effect: Allow
              - Effect: Allow
                Action:
                  - devicefarm:ListProjects
                  - devicefarm:ListDevicePools
                  - devicefarm:GetRun
                  - devicefarm:GetUpload
                  - devicefarm:CreateUpload
                  - devicefarm:ScheduleRun
                Resource: "*"
              - Effect: Allow
                Action:
                  - servicecatalog:ListProvisioningArtifacts
                  - servicecatalog:CreateProvisioningArtifact
                  - servicecatalog:DescribeProvisioningArtifact
                  - servicecatalog:DeleteProvisioningArtifact
                  - servicecatalog:UpdateProduct
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                  - states:DescribeStateMachine
                  - states:StartExecution
                Resource: "*"
              - Effect: Allow
                Action:
                  - appconfig:StartDeployment
                  - appconfig:StopDeployment
                  - appconfig:GetDeployment
                Resource: "*"
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:*"
                  - "logs:*"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeDhcpOptions"
                  - "ec2:DescribeVpcs"
                  - "ec2:CreateNetworkInterfacePermission"
                Effect: Allow
                Resource: "*"
  B2:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref UploadBucket
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
            AllowedOrigins:
              - "*"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !Ref IndexRoleArn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  B2Policy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref B2
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref B2
                - /*

  B2InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IndexRoleArn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${UploadBucket}

  ApiGatewayS3ProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${UploadBucket}"
                  - !Sub "arn:aws:s3:::${UploadBucket}/*"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !Ref SearchRoleArn
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: "APIGateway"
            - "/*"

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AI Album APIs
      Description: APIs for AI Album
      ApiKeySourceType: HEADER
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Search application"
          version: "1.0.0"
          title: "AI Photo Search"
        basePath: "/v1"
        schemes:
          - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              parameters:
                - name: "q"
                  in: "query"
                  required: false
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchRoleArn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.querystring.q: "method.request.querystring.q"
                requestTemplates:
                  application/json: '{ "q": "$input.params(''q'')" }'
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customlabels'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: "when_no_match"
                type: "mock"
          /upload:
            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customlabels'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: "when_no_match"
                type: "mock"
          /upload/{bucket}:
            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              parameters:
                - name: "bucket"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customlabels'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: "when_no_match"
                type: "mock"
          /upload/{bucket}/{key}:
            put:
              produces:
                - "image/*"
                - "application/json"
              parameters:
                - name: "Content-Type"
                  in: "header"
                  required: false
                  type: "string"
                - name: "x-amz-meta-customlabels"
                  in: "header"
                  required: false
                  type: "string"
                - name: "item"
                  in: "path"
                  required: true
                  type: "string"
                - name: "folder"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                  schema:
                    $ref: "#/definitions/Photo"
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayS3ProxyRole.Arn
                httpMethod: "PUT"
                uri: "arn:aws:apigateway:us-east-1:s3:path/{folder}/{item}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-amz-meta-customlabels'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.path.key: "method.request.path.item"
                  integration.request.path.bucket: "method.request.path.folder"
                  integration.request.header.Content-Type: "method.request.header.Content-Type"
                  integration.request.header.x-amz-meta-customLabels: "method.request.header.x-amz-meta-customlabels"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_BINARY"
                type: "aws"
            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              parameters:
                - name: "x-amz-meta-customlabels"
                  in: "header"
                  required: false
                  type: "string"
                - name: "folder"
                  in: "path"
                  required: true
                  type: "string"
                - name: "item"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customlabels'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: "when_no_match"
                type: "mock"
        definitions:
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"
        x-amazon-apigateway-binary-media-types:
          - "image/jpeg"
          - "image/jpg"
          - "image/png"
          - "image/*"

  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref APIGateway
      StageName: !Ref StageName

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGateway

  TestAPIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - APIGateway
    Properties:
      ApiStages:
        - ApiId: !Ref APIGateway
          Stage: !Ref APIStage
      Description: To test usage plan and api key in REST API.
      Quota:
        Limit: 100
        Period: MONTH
      UsagePlanName: "test-usage-plan"

  TestApiAccessKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - APIGateway
    Properties:
      Name: !Ref KeyName
      Description: To test usage plan and api key in REST API.
      Enabled: true

  LinkUsagePlanApiKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref TestApiAccessKey
      KeyType: API_KEY
      UsagePlanId: !Ref TestAPIUsagePlan
  #
  # ---------- CODEPIPELINE ----------
  #
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:*"
                  - "logs:*"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeDhcpOptions"
                  - "ec2:DescribeVpcs"
                  - "ec2:CreateNetworkInterfacePermission"
                Effect: Allow
                Resource: "*"
  CodeBuildProject1:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildRole.Arn
  CodeBuildProject2:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt CodeBuildRole.Arn
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref P1BucketName
      VersioningConfiguration:
        Status: Suspended
  P1:
    DependsOn:
      - Opensearch
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodepipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction_LF1
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject1
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput1
              RunOrder: 1
            - Name: BuildAction_LF2
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject2
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput2
              RunOrder: 2
        - Name: Deploy
          Actions:
            - Name: CloudFormationDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: SourceCode
                - Name: BuildOutput1
                - Name: BuildOutput2
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt CloudformationRole.Arn
                StackName: !Ref ApplicationStackName
                TemplatePath: !Sub "SourceCode::cloudformation/P1_LF.yaml"
                ParameterOverrides: |
                  {
                    "BucketName1" : { "Fn::GetArtifactAtt" : ["BuildOutput1", "BucketName"]},
                    "ObjectKey1" : { "Fn::GetArtifactAtt" : ["BuildOutput1", "ObjectKey"]},
                    "BucketName2" : { "Fn::GetArtifactAtt" : ["BuildOutput2", "BucketName"]},
                    "ObjectKey2" : { "Fn::GetArtifactAtt" : ["BuildOutput2", "ObjectKey"]}
                  }
              RunOrder: 1
  CloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
Outputs:
  outputWebsiteURL:
    Value: !GetAtt
      - B1
      - WebsiteURL
    Description: Static website URL
  ApiRootUrl:
    Description: Root Url of the API
    Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
